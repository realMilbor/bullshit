from datetime import datetime
from typing import Tuple, Callable


def model(name: str, schema: Tuple[str, type, bool]) -> type:
    def ivar_name(attribute_name: str) -> str:
        assert attribute_name and attribute_name.isidentifier()
        return '_' + attribute_name

    def make_property(name: str, typeobj: type, is_nullable: bool) -> property:
        ivar = ivar_name(name)

        def generated_get(self):
            return getattr(self, ivar, None)

        def generated_set(self, value: typeobj):
            assert is_nullable if value is None else isinstance(value, typeobj)
            setattr(self, ivar, typeobj)

        def generated_del(self):
            delattr(self, ivar)

        docstring = "Autogenerated property '" + name + "' of type " + str(typeobj)

        return property(generated_get, generated_set, generated_del, docstring)

    def generated_init(self, *args, **kwargs) -> None:
        ordered_arguments = list(args)
        for prop_name, prop_type, is_prop_nullable in schema:
            if prop_name in kwargs:
                value = kwargs[prop_name]
            else:
                value = ordered_arguments.pop(0) if ordered_arguments else None

            assert is_prop_nullable if value is None else isinstance(value, prop_type)
            setattr(self, ivar_name(prop_name), value)

    def generated_serialize(self) -> Tuple:
        return tuple([getattr(self, ivar_name(x[0]), None) for x in schema])

    def generated_str(self) -> str:
        identity = '<model "' + name + '" at ' + hex(id(self)) + '>'
        content = '{' + ', '.join([str(x[0]) + ': ' + str(getattr(self, ivar_name(x[0]))) for x in schema]) + '}'
        return identity + ' ' + content

    attributes = {i[0]: make_property(*i) for i in schema}
    attributes['__init__'] = generated_init
    attributes['__str__'] = generated_str
    attributes['serialize'] = generated_serialize
    superclasses = (Model,)
    generated_class = type(name, superclasses, attributes)
    return generated_class


# class Car:
#     def __init__(self, id, num, color, mark, is_foreign):
#         super().__init__()
#         self._id = int(id)
#         self._num = str(num)
#         self._color = int(color)
#         self._mark = str(mark)
#         self._is_foreign = bool(is_foreign)
#
#     @property
#     def id(self):
#         return self._id
#
#     @property
#     def license_plate(self):
#         return self._num
#
#     @property
#     def color(self):
#         return self._color
#
#     @property
#     def model(self):
#         return self._mark
#
#     @property
#     def is_foreign(self):
#         return self._is_foreign
#
#
# class Master:
#     def __init__(self, id, name):
#         super().__init__()
#         self._id = int(id)
#         self._name = str(name)
#
#     @property
#     def id(self):
#         return self._id
#
#     @property
#     def name(self):
#         return self._name
#
#
# class Service:
#     def __init__(self, id, name, cost_our, cost_foreign):
#         super().__init__()
#         self._id = int(id)
#         self._name = str(name)
#         self._cost_our = str(cost_our)
#         self._cost_foreign = str(cost_foreign)
#
#     @property
#     def id(self):
#         return self._id
#
#     @property
#     def name(self):
#         return self._name
#
#     @property
#     def cost_native(self):
#         return self._cost_our
#
#     @property
#     def cost_foreign(self):
#         return self._cost_foreign
#
#
# class Work:
#     def __init__(self, id, date, master_id, car_id, service_id):
#         super().__init__()
#         self._id = int(id)
#         self._date = datetime(date)
#         self._master_id = int(master_id)
#         self._car_id = int(car_id)
#         self._service_id = int(service_id)
#
#     @property
#     def id(self):
#         return self._id
#
#     @property
#     def date(self):
#         return self._date
#
#     @property
#     def master_id(self):
#         return self._master_id
#
#     @property
#     def car_id(self):
#         return self._car_id
#
#     @property
#     def service_id(self):
#         return self.service_id
